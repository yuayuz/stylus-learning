// stylus 基于缩进,用缩进来替代'{'和'}'
// 允许通过逗号分隔或者换行(可以在尾部添加逗号以区别属性)来一次定义多个选择器的属性
div,body
  border blue 5px dot-dot-dash
h1
h2
  border red 5px double
h2,
h3
  border blueviolet 5px dashed

// 父级引用
// 字符&指向父选择器。
textarea
input
  color #A7A7A7
  &:hover
    color #000

// 部分引用
// ^[N]选择器中的任意位置，N可以是数字，表示部分引用。
// 部分引用的工作方式与父引用类似，但是父引用包含整个选择器，
// 而部分选择器仅包含N嵌套选择器的第一个合并级别，因此您可以单独访问这些嵌套级别。
// ^[0]提供第一级的选择器，^[1]提供第二级的渲染选择器，依此类推
// 负值从末尾开始计数，因此 ^[-1] 会为您提供之前链中的最后一个选择器&
.foo
  &__bar
    &_baz
      width: 10px

      ^[-1]:hover &
        width: 20px

// 部分引用的范围
// 部分引用中的范围#
// ^[N..M] 选择器中的任意位置，N和都M可以是数字，表示部分引用。
// 如果需要获取选择器的原始部分，或者以编程方式获取部分范围，则可以使用部分引用内的范围。
// 如果范围从正值开始，则结果将不包含前几个级别的选择器，
// 并且将获得结果，就好像这些级别的选择器插入到样式表的根目录中，并且省略了组合器
.foo
  & .bar
    width: 10px

    ^[0]:hover ^[1..-1]
      width: 20px

// 初始引用
// ~/ 选择器开头的字符可用于指向第一个嵌套的选择器，可以视为 ^[0] 的快捷方式。
// 唯一的缺点是只能在选择器的开头使用初始引用
.block
  &__element
    ~/:hover &
      color: red

// 相对引用#
// ../ 选择器开头的字符标记相对引用，它指向已编译选择器的上一个。只能在选择器开头使用使用
.foo
  .bar
    width: 10px

    &,
    ../ .baz
      height: 10px

// 根引用
// / 选择器开头的字符是根引用。它引用根上下文，这意味着选择器不会将父级选择器添加到其前面（除非您将它与 一起使用）。
// 当需要将一些样式同时写入某个嵌套选择器和另一个不在当前范围内的选择器时&，它会很有帮助
textarea
input
  color #A7A7A7
  &:hover,
  /.is-hovered // 与textarea和input选择器同级
    color #000

// selector() bif
// 可以使用内置函数selector()来获取当前编译的选择器。可以在 mixin 中使用它来进行检查或其他巧妙的事情
.foo
  selector()
// => '.foo'

.foo
  &:hover
    selector()
// '.foo:hover'

// selector()bif的多个值#
// selector()bif 可以接受多个值或以逗号分隔的列表，以便更容易地创建嵌套选择器结构。
{selector('.a', '.b', '.c, .d')}
  color: red

// selectors() bif
// 此 bif 返回当前级别的嵌套选择器的逗号分隔列表
.a
  .b
    &__c
      content: selectors()

// 消歧义
// 诸如这样的表达式margin - n既可以解释为减法运算，
// 也可以解释为具有一元减法的属性。为了消除歧义，请用括号将表达式括起来
pad(n)
  margin (- n)

body
  pad(5px)
