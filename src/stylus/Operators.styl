// 运算符优先级
// 运算符优先级表，从高到低
/*
.
[]
! ~ + -
is defined
** * / %
+ -
... ..
<= >= < >
in
== is != is not isnt
is a
&& and || or
?:
= := ?= += -= *= /= %=
not
if unless
*/

// 下标[]
// 下标运算符允许通过索引（从零开始）获取表达式中的值。
// 负索引值从表达式中的最后一个元素开始。

// 范围 .. ...
// 提供了包含（..）和排除（ ）范围运算符，扩展为表达式：...
1..5
// => 1 2 3 4 5

1...5
// => 1 2 3 4

5..1
// => 5 4 3 2 1

// 真实性
// Stylus 中的几乎所有内容都会解析为true，包括带后缀的单位。
// 甚至0%、0px等也会解析为true（因为在 Stylus 中，mixin 或函数通常会接受有效的单位）。
// 但是，0它本身就是false算术方面的。
// 长度大于 1 的表达式（或“列表”）被视为真值

// 铸件
// unit()作为内置函数的简洁替代，(expr) unit可以使用语法来强制使用后缀。
body
  n = 5
  foo1: (n)em
  foo2: (n)%
  foo3: (n + 5)%
  foo4: (n * 5)px
  foo5: unit(n + 5, '%')
  foo6: unit(5 + 180 / 2, deg)

// Sprintf
//字符串 sprintf 类运算符%可用于生成文字值，内部通过s()内置函数传递参数：
'-webkit-gradient(%s, %s, %s)' % (linear (0 0) (0 100%))
// => -webkit-gradient(linear, 0 0, 0 100%)

// 条件赋值：?= :=#
// 条件赋值运算符?=（别名为:=）允许定义变量而不破坏旧值（如果存在）。
// 此运算符扩展为is defined三元运算中的二元运算

// 实例检查：is
// Stylus 提供了一个名为的二元运算符is a用于类型检查
15 is a 'unit'
// => true

15 is a 'rgba'
// => false

// 变量定义：is defined
// 此伪二元运算符不接受右侧运算符，也不计算左侧运算符。这使我们能够检查变量是否已赋值。
foo = 15px
foo is defined
// => true

#fff is defined
// => 'invalid "is defined" check on non-variable #fff'

